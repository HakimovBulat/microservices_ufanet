version: '3.9'

volumes:
    postgresql:

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=my_db'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    # ports:
    #   - "2181:2181"
    ports:
      - 22181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    # ports:
    #   - "9000:9000"
    ports:
      - "39092:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka
  
  kafka:
    depends_on:
      - zookeeper
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    # ports:
    #   - "9092:9092"
    ports:
      - 29092:29092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=logical
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  rabbitmq:
    image: rabbitmq:3.9.12-management-alpine
    restart: unless-stopped
    hostname: rabbitmq
    container_name: rabbitmq-broker
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test:
        [ "CMD", "echo", "Awaiting rabbitmq..." ]
      interval: 10s
      timeout: 10s
      retries: 8

  wal:
    container_name: wal
    build:
        context: ../.
        target: prod
        dockerfile: ./Dockerfile
    volumes:
        - ./certs:/certs
        - ./config.yml:/app/config.yml
    depends_on:
        - postgres_primary
        - rabbitmq
#    command: tail -f /dev/null
